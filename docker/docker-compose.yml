version: '3.2'
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - payment-service-spring-boot
      - frontend
    ports:
      - "80:80"
    networks:
      net:
        aliases:
          - nginx

  frontend:
    build:
      args:
        - PORT=3001
        - NODE_ENV=production
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - NODE_ENV=production
    ports:
      - "3001"
    networks:
      net:
        aliases:
          - frontend

  prometheus:
    image: prom/prometheus
    container_name: prom
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      net:
        aliases:
          - prometheus

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin
    networks:
      net:
        aliases:
          - tempo

  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mem
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to increase heap size
      # - JAVA_OPTS=-Xms128m -Xmx128m -XX:+ExitOnOutOfMemoryError
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - "9411:9411"
    # Uncomment to enable debug logging
    # command: --logging.level.zipkin2=DEBUG
    networks:
      net:
        aliases:
          - zipkin

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      net:
        aliases:
          - loki

  fluent-bit:
    image: fluent/fluent-bit
    container_name: fluent-bit
    environment:
      - HOST=otel-collector
      - PORT=8006
      - LOG_PATH=/tmp/*.log
      - FLB_LOG_LEVEL=trace
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - /tmp/payment-service-spring-boot.log:/tmp/payment-service-spring-boot.log
      - /tmp/payment-service.log:/tmp/payment-service.log
#      - /tmp/simple-flask-python-server.log:/tmp/simple-flask-python-server.log
      - /tmp/golang-kafka-consumer.log:/tmp/golang-kafka-consumer.log
      - /tmp/user-service-nodejs.log:/tmp/user-service-nodejs.log
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluent-bit-custom-parsers.conf:/fluent-bit/etc/custom_parsers.conf
    networks:
      net:
        aliases:
          - fluent-bit

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otelcol-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
      - "1234:1234" # zpages extension
    networks:
      net:
        aliases:
          - otel

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    image: grafana/grafana:latest
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    ports:
      - "3000:3000"
    networks:
      net:
        aliases:
          - grafana

  elasticsearch:
    image: elasticsearch:7.17.13
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw              # Persistence data
    networks:
      net:
        aliases:
          - elastic

  kibana:
    image: kibana:7.17.13
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      net:
        aliases:
          - kibana

  zookeeper:
    image: bitnami/zookeeper #antrea/confluentinc-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      #      ZOOKEEPER_CLIENT_PORT: 2181
      #      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      net:
        aliases:
          - zookeeper

  kafka:
    image: bitnami/kafka #antrea/confluentinc-kafka:6.2.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    #      - '9101:9101'
    environment:
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper
    networks:
      net:
        aliases:
          - kafka

  schema-registry:
    image: docker.io/bitnami/schema-registry:7.5
    container_name: schema-registry
    ports:
      - '8081:8081'
    depends_on:
      - kafka
    environment:
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka:9092
    networks:
      net:
        aliases:
          - schema-registry

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "5432:5432"
    networks:
      net:
        aliases:
          - postgres

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      net:
        aliases:
          - redis

  payment-service-spring-boot:
    image: payment-service-spring-boot:0.0.1-SNAPSHOT
    container_name: payment-service-spring-boot
    environment:
      - KAFKA_URL=kafka:9092
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - SERVER_PORT=8080
      - OTLP_URL=http://otel-collector:4318
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/postgres
      - SPRING_R2DBC_USERNAME=postgres
      - SPRING_R2DBC_PASSWORD=changeme
      - SPRING_DATA_REDIS_HOST=redis
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
    depends_on:
      - otel-collector
      - kafka
      - schema-registry
      - postgres
      - redis
    ports:
      - "8080:8080"
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: payment-service-spring-boot
    networks:
      net:
        aliases:
          - payment-service-spring-boot

  sanction-service-golang:
    build:
      args:
        - ENV=docker
      context: ../sanction-service
      dockerfile: Dockerfile
    container_name: sanction-service-golang
    depends_on:
      - fluent-bit
    environment:
      - SET_LOG_FILE=False
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: sanction-service-golang
    networks:
      net:
        aliases:
          - sanction-service-golang

  user-service-nodejs:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: user-service-nodejs
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: user-service-nodejs
    networks:
      net:
        aliases:
          - user-service-nodejs

  auth-service-python:
    build:
      context: ../auth-service
      dockerfile: Dockerfile
    container_name: auth-service-python
    depends_on:
      - fluent-bit
    environment:
      - SET_LOG_FILE=False
    volumes:
      - ../payment-service/src/main/resources/avro/payment-schema.avsc:/tmp/payment-schema.avsc
      - ../payment-service/src/main/resources/avro/update-payment-schema.avsc:/tmp/update-payment-schema.avsc
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: auth-service-python
    networks:
      net:
        aliases:
          - auth-service-python

networks:
  net: