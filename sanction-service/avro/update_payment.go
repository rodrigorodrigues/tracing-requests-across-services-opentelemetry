// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     update-payment-schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UpdatePayment struct {
	PaymentId string `json:"paymentId"`

	UpdateAt int64 `json:"updateAt"`

	ReasonFailed *UnionNullString `json:"reasonFailed"`

	Status CheckStatus `json:"status"`

	CheckFailed bool `json:"checkFailed"`
}

const UpdatePaymentAvroCRC64Fingerprint = "h\xdb\x1eZ\xcc\xc68\x95"

func NewUpdatePayment() UpdatePayment {
	r := UpdatePayment{}
	r.CheckFailed = true
	return r
}

func DeserializeUpdatePayment(r io.Reader) (UpdatePayment, error) {
	t := NewUpdatePayment()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUpdatePaymentFromSchema(r io.Reader, schema string) (UpdatePayment, error) {
	t := NewUpdatePayment()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUpdatePayment(r UpdatePayment, w io.Writer) error {
	var err error
	err = vm.WriteString(r.PaymentId, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.UpdateAt, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReasonFailed, w)
	if err != nil {
		return err
	}
	err = writeCheckStatus(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.CheckFailed, w)
	if err != nil {
		return err
	}
	return err
}

func (r UpdatePayment) Serialize(w io.Writer) error {
	return writeUpdatePayment(r, w)
}

func (r UpdatePayment) Schema() string {
	return "{\"fields\":[{\"name\":\"paymentId\",\"type\":\"string\"},{\"name\":\"updateAt\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"reasonFailed\",\"type\":[\"null\",\"string\"]},{\"name\":\"status\",\"type\":{\"name\":\"CheckStatus\",\"symbols\":[\"SANCTION_CHECK\",\"AUTH_CHECK\",\"USER_CONFIRMATION_CHECK\"],\"type\":\"enum\"}},{\"default\":true,\"name\":\"checkFailed\",\"type\":\"boolean\"}],\"name\":\"com.example.schema.avro.UpdatePayment\",\"type\":\"record\"}"
}

func (r UpdatePayment) SchemaName() string {
	return "com.example.schema.avro.UpdatePayment"
}

func (_ UpdatePayment) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UpdatePayment) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UpdatePayment) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UpdatePayment) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UpdatePayment) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UpdatePayment) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UpdatePayment) SetString(v string)   { panic("Unsupported operation") }
func (_ UpdatePayment) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UpdatePayment) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.PaymentId}

		return w

	case 1:
		w := types.Long{Target: &r.UpdateAt}

		return w

	case 2:
		r.ReasonFailed = NewUnionNullString()

		return r.ReasonFailed
	case 3:
		w := CheckStatusWrapper{Target: &r.Status}

		return w

	case 4:
		w := types.Boolean{Target: &r.CheckFailed}

		return w

	}
	panic("Unknown field index")
}

func (r *UpdatePayment) SetDefault(i int) {
	switch i {
	case 4:
		r.CheckFailed = true
		return
	}
	panic("Unknown field index")
}

func (r *UpdatePayment) NullField(i int) {
	switch i {
	case 2:
		r.ReasonFailed = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ UpdatePayment) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UpdatePayment) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UpdatePayment) HintSize(int)                     { panic("Unsupported operation") }
func (_ UpdatePayment) Finalize()                        {}

func (_ UpdatePayment) AvroCRC64Fingerprint() []byte {
	return []byte(UpdatePaymentAvroCRC64Fingerprint)
}

func (r UpdatePayment) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["paymentId"], err = json.Marshal(r.PaymentId)
	if err != nil {
		return nil, err
	}
	output["updateAt"], err = json.Marshal(r.UpdateAt)
	if err != nil {
		return nil, err
	}
	output["reasonFailed"], err = json.Marshal(r.ReasonFailed)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["checkFailed"], err = json.Marshal(r.CheckFailed)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UpdatePayment) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["paymentId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaymentId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for paymentId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["updateAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UpdateAt); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for updateAt")
	}
	val = func() json.RawMessage {
		if v, ok := fields["reasonFailed"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReasonFailed); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for reasonFailed")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["checkFailed"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CheckFailed); err != nil {
			return err
		}
	} else {
		r.CheckFailed = true
	}
	return nil
}
