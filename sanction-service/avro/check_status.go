// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     update-payment-schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CheckStatus int32

const (
	CheckStatusSANCTION_CHECK          CheckStatus = 0
	CheckStatusAUTH_CHECK              CheckStatus = 1
	CheckStatusUSER_CONFIRMATION_CHECK CheckStatus = 2
)

func (e CheckStatus) String() string {
	switch e {
	case CheckStatusSANCTION_CHECK:
		return "SANCTION_CHECK"
	case CheckStatusAUTH_CHECK:
		return "AUTH_CHECK"
	case CheckStatusUSER_CONFIRMATION_CHECK:
		return "USER_CONFIRMATION_CHECK"
	}
	return "unknown"
}

func writeCheckStatus(r CheckStatus, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewCheckStatusValue(raw string) (r CheckStatus, err error) {
	switch raw {
	case "SANCTION_CHECK":
		return CheckStatusSANCTION_CHECK, nil
	case "AUTH_CHECK":
		return CheckStatusAUTH_CHECK, nil
	case "USER_CONFIRMATION_CHECK":
		return CheckStatusUSER_CONFIRMATION_CHECK, nil
	}

	return -1, fmt.Errorf("invalid value for CheckStatus: '%s'", raw)

}

func (b CheckStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *CheckStatus) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewCheckStatusValue(stringVal)
	*b = val
	return err
}

type CheckStatusWrapper struct {
	Target *CheckStatus
}

func (b CheckStatusWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b CheckStatusWrapper) SetInt(v int32) {
	*(b.Target) = CheckStatus(v)
}

func (b CheckStatusWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b CheckStatusWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b CheckStatusWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b CheckStatusWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b CheckStatusWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b CheckStatusWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b CheckStatusWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b CheckStatusWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b CheckStatusWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b CheckStatusWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b CheckStatusWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b CheckStatusWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b CheckStatusWrapper) Finalize() {}
