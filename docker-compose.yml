version: '3.2'
services:
  prometheus:
    image: prom/prometheus
    container_name: prom
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      net:
        aliases:
          - prometheus

#  promtail:
#    image: grafana/promtail:2.9.0
#    container_name: promtail
#    volumes:
##      - /var/log:/var/log
#      - /tmp/spring-boot-service.log:/tmp/spring-boot-service.log
#      - /tmp/simple-flask-python-server.log:/tmp/simple-flask-python-server.log
#      - ./promtail-config.yaml:/etc/promtail/config.yml
#    command: -config.file=/etc/promtail/config.yml
#    networks:
#      net:
#        aliases:
#          - promtail

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin
    networks:
      net:
        aliases:
          - tempo

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      net:
        aliases:
          - loki

  fluent-bit:
    image: fluent/fluent-bit
    container_name: fluent-bit
    environment:
      - LOKI_HOST=loki
      - LOKI_PORT=3100
      - LOG_PATH=/tmp/*.log
      - FLB_LOG_LEVEL=trace
    volumes:
      - /tmp/spring-boot-service.log:/tmp/spring-boot-service.log
      - /tmp/simple-flask-python-server.log:/tmp/simple-flask-python-server.log
      - /tmp/golang-kafka-consumer.log:/tmp/golang-kafka-consumer.log
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluent-bit-custom-parsers.conf:/fluent-bit/etc/custom_parsers.conf
    networks:
      net:
        aliases:
          - fluent-bit
#  grafana-fluent-bit-plugin:
#    image: grafana/fluent-bit-plugin-loki:latest
#    container_name: grafana-fluent-bit-plugin
#    environment:
#      - LOKI_URL=http://loki:3100/loki/api/v1/push
#      - LOG_PATH=/tmp/*.log
#      - FLB_LOG_LEVEL=trace
#    volumes:
#      - /tmp/spring-boot-service.log:/tmp/spring-boot-service.log
#      - /tmp/simple-flask-python-server.log:/tmp/simple-flask-python-server.log
##      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
#    ports:
#      - "24224:24224"
#      - "24224:24224/udp"
#    networks:
#      net:
#        aliases:
#          - fluent-bit

 #otel-official
#  otel-collector:
#    image: otel/opentelemetry-collector:latest
#    container_name: otel-collector
#    command: [ "--config=/etc/otel-collector-config.yaml" ]
#    volumes:
#      - /var/log:/var/log
#      - ./otelcol-config.yaml:/etc/otel-collector-config.yaml
#    ports:
#      - "1888:1888"   # pprof extension
#      - "13133:13133" # health_check extension
#      - "4317:4317"   # OTLP gRPC receiver
#      - "4318:4318"   # OTLP http receiver
#      - "55679:55679" # zpages extension
#    networks:
#      net:
#        aliases:
#          - otel
 #otel-contrib
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - /var/log:/var/log
      - ./otelcol-config.yaml:/etc/otel-collector-config.yaml
#    depends_on:
#      - zipkin
    ports:
      - "1888:1888"   # pprof extension
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
      - "1234:1234" # zpages extension
    networks:
      net:
        aliases:
          - otel

#  nginx:
#    image: nginx:latest
#    container_name: nginx
#    hostname: nginx
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#    depends_on:
#      - api01
#      - api02
#    ports:
#      - "80:80"
#    networks:
#      net:
#        aliases:
#          - nginx

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    image: grafana/grafana:latest
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    ports:
      - "3000:3000"
    networks:
      net:
        aliases:
          - grafana

#  zipkin:
#    image: openzipkin/zipkin
#    container_name: zipkin
#    ports:
#      - "9411:9411"
#    networks:
#      net:
#        aliases:
#          - zipkin

  elasticsearch:
    image: elasticsearch:7.17.13 #8.10.2 #7.14.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw              # Persistence data
    networks:
      net:
        aliases:
          - elastic

  logstash:
    image: logstash:7.17.13 #8.10.2 #7.14.1
    container_name: logstash
    ports:
      - "5000:5000"
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro                # Pipeline configuration
    depends_on:
      - elasticsearch
    networks:
      net:
        aliases:
          - logstash

  kibana:
    image: kibana:7.17.13 #8.10.2 #7.14.1
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      net:
        aliases:
          - kibana

  zookeeper:
    image: bitnami/zookeeper #antrea/confluentinc-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      #      ZOOKEEPER_CLIENT_PORT: 2181
      #      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      net:
        aliases:
          - zookeeper

  kafka:
    image: bitnami/kafka #antrea/confluentinc-kafka:6.2.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    #      - '9101:9101'
    environment:
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper
    networks:
      net:
        aliases:
          - kafka

#  spring-boot-service:
#    image: spring-boot-service:0.0.1-SNAPSHOT
#    container_name: spring-boot-service
#    environment:
#      - address-service-url=http://python-service:8091
#      - logstash.host=logstash
#      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
#      - SERVER_PORT=8080
#    depends_on:
#      - prometheus
#      - zipkin
#      - logstash
#    ports:
#      - "8080:8080"
#    networks:
#      net:
#        aliases:
#          - spring-boot-service
#
#  python-service:
#    build:
#      args:
#        - PORT=8091
#      context: ./simple-flask-python-server
#      dockerfile: Dockerfile
#    container_name: python-service
#    depends_on:
#      - prometheus
#      - zipkin
#      - logstash
#    ports:
#      - "8091:8091"
#    networks:
#      net:
#        aliases:
#          - python-service

networks:
  net: